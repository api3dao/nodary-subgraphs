// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreatedTemplate extends ethereum.Event {
  get params(): CreatedTemplate__Params {
    return new CreatedTemplate__Params(this);
  }
}

export class CreatedTemplate__Params {
  _event: CreatedTemplate;

  constructor(event: CreatedTemplate) {
    this._event = event;
  }

  get templateId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get airnode(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get endpointId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get parameters(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class FailedRequest extends ethereum.Event {
  get params(): FailedRequest__Params {
    return new FailedRequest__Params(this);
  }
}

export class FailedRequest__Params {
  _event: FailedRequest;

  constructor(event: FailedRequest) {
    this._event = event;
  }

  get airnode(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get errorMessage(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class FulfilledRequest extends ethereum.Event {
  get params(): FulfilledRequest__Params {
    return new FulfilledRequest__Params(this);
  }
}

export class FulfilledRequest__Params {
  _event: FulfilledRequest;

  constructor(event: FulfilledRequest) {
    this._event = event;
  }

  get airnode(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class FulfilledWithdrawal extends ethereum.Event {
  get params(): FulfilledWithdrawal__Params {
    return new FulfilledWithdrawal__Params(this);
  }
}

export class FulfilledWithdrawal__Params {
  _event: FulfilledWithdrawal;

  constructor(event: FulfilledWithdrawal) {
    this._event = event;
  }

  get airnode(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sponsor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get withdrawalRequestId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get sponsorWallet(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MadeFullRequest extends ethereum.Event {
  get params(): MadeFullRequest__Params {
    return new MadeFullRequest__Params(this);
  }
}

export class MadeFullRequest__Params {
  _event: MadeFullRequest;

  constructor(event: MadeFullRequest) {
    this._event = event;
  }

  get airnode(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get requesterRequestCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get chainId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get requester(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get endpointId(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get sponsor(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get sponsorWallet(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get fulfillAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get fulfillFunctionId(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get parameters(): Bytes {
    return this._event.parameters[10].value.toBytes();
  }
}

export class MadeTemplateRequest extends ethereum.Event {
  get params(): MadeTemplateRequest__Params {
    return new MadeTemplateRequest__Params(this);
  }
}

export class MadeTemplateRequest__Params {
  _event: MadeTemplateRequest;

  constructor(event: MadeTemplateRequest) {
    this._event = event;
  }

  get airnode(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requestId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get requesterRequestCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get chainId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get requester(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get templateId(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get sponsor(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get sponsorWallet(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get fulfillAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get fulfillFunctionId(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get parameters(): Bytes {
    return this._event.parameters[10].value.toBytes();
  }
}

export class RequestedWithdrawal extends ethereum.Event {
  get params(): RequestedWithdrawal__Params {
    return new RequestedWithdrawal__Params(this);
  }
}

export class RequestedWithdrawal__Params {
  _event: RequestedWithdrawal;

  constructor(event: RequestedWithdrawal) {
    this._event = event;
  }

  get airnode(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sponsor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get withdrawalRequestId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get sponsorWallet(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SetSponsorshipStatus extends ethereum.Event {
  get params(): SetSponsorshipStatus__Params {
    return new SetSponsorshipStatus__Params(this);
  }
}

export class SetSponsorshipStatus__Params {
  _event: SetSponsorshipStatus;

  constructor(event: SetSponsorshipStatus) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sponsorshipStatus(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AirnodeRrpV0__fulfillResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getCallSuccess(): boolean {
    return this.value0;
  }

  getCallData(): Bytes {
    return this.value1;
  }
}

export class AirnodeRrpV0__getTemplatesResult {
  value0: Array<Address>;
  value1: Array<Bytes>;
  value2: Array<Bytes>;

  constructor(
    value0: Array<Address>,
    value1: Array<Bytes>,
    value2: Array<Bytes>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    map.set("value2", ethereum.Value.fromBytesArray(this.value2));
    return map;
  }

  getAirnodes(): Array<Address> {
    return this.value0;
  }

  getEndpointIds(): Array<Bytes> {
    return this.value1;
  }

  getParameters(): Array<Bytes> {
    return this.value2;
  }
}

export class AirnodeRrpV0__templatesResult {
  value0: Address;
  value1: Bytes;
  value2: Bytes;

  constructor(value0: Address, value1: Bytes, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getAirnode(): Address {
    return this.value0;
  }

  getEndpointId(): Bytes {
    return this.value1;
  }

  getParameters(): Bytes {
    return this.value2;
  }
}

export class AirnodeRrpV0 extends ethereum.SmartContract {
  static bind(address: Address): AirnodeRrpV0 {
    return new AirnodeRrpV0("AirnodeRrpV0", address);
  }

  checkAuthorizationStatus(
    authorizers: Array<Address>,
    airnode: Address,
    requestId: Bytes,
    endpointId: Bytes,
    sponsor: Address,
    requester: Address
  ): boolean {
    let result = super.call(
      "checkAuthorizationStatus",
      "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address):(bool)",
      [
        ethereum.Value.fromAddressArray(authorizers),
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytes(requestId),
        ethereum.Value.fromFixedBytes(endpointId),
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromAddress(requester)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkAuthorizationStatus(
    authorizers: Array<Address>,
    airnode: Address,
    requestId: Bytes,
    endpointId: Bytes,
    sponsor: Address,
    requester: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAuthorizationStatus",
      "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address):(bool)",
      [
        ethereum.Value.fromAddressArray(authorizers),
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytes(requestId),
        ethereum.Value.fromFixedBytes(endpointId),
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromAddress(requester)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkAuthorizationStatuses(
    authorizers: Array<Address>,
    airnode: Address,
    requestIds: Array<Bytes>,
    endpointIds: Array<Bytes>,
    sponsors: Array<Address>,
    requesters: Array<Address>
  ): Array<boolean> {
    let result = super.call(
      "checkAuthorizationStatuses",
      "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[]):(bool[])",
      [
        ethereum.Value.fromAddressArray(authorizers),
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytesArray(requestIds),
        ethereum.Value.fromFixedBytesArray(endpointIds),
        ethereum.Value.fromAddressArray(sponsors),
        ethereum.Value.fromAddressArray(requesters)
      ]
    );

    return result[0].toBooleanArray();
  }

  try_checkAuthorizationStatuses(
    authorizers: Array<Address>,
    airnode: Address,
    requestIds: Array<Bytes>,
    endpointIds: Array<Bytes>,
    sponsors: Array<Address>,
    requesters: Array<Address>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "checkAuthorizationStatuses",
      "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[]):(bool[])",
      [
        ethereum.Value.fromAddressArray(authorizers),
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytesArray(requestIds),
        ethereum.Value.fromFixedBytesArray(endpointIds),
        ethereum.Value.fromAddressArray(sponsors),
        ethereum.Value.fromAddressArray(requesters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  createTemplate(
    airnode: Address,
    endpointId: Bytes,
    parameters: Bytes
  ): Bytes {
    let result = super.call(
      "createTemplate",
      "createTemplate(address,bytes32,bytes):(bytes32)",
      [
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytes(endpointId),
        ethereum.Value.fromBytes(parameters)
      ]
    );

    return result[0].toBytes();
  }

  try_createTemplate(
    airnode: Address,
    endpointId: Bytes,
    parameters: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createTemplate",
      "createTemplate(address,bytes32,bytes):(bytes32)",
      [
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytes(endpointId),
        ethereum.Value.fromBytes(parameters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fulfill(
    requestId: Bytes,
    airnode: Address,
    fulfillAddress: Address,
    fulfillFunctionId: Bytes,
    data: Bytes,
    signature: Bytes
  ): AirnodeRrpV0__fulfillResult {
    let result = super.call(
      "fulfill",
      "fulfill(bytes32,address,address,bytes4,bytes,bytes):(bool,bytes)",
      [
        ethereum.Value.fromFixedBytes(requestId),
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromAddress(fulfillAddress),
        ethereum.Value.fromFixedBytes(fulfillFunctionId),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return new AirnodeRrpV0__fulfillResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_fulfill(
    requestId: Bytes,
    airnode: Address,
    fulfillAddress: Address,
    fulfillFunctionId: Bytes,
    data: Bytes,
    signature: Bytes
  ): ethereum.CallResult<AirnodeRrpV0__fulfillResult> {
    let result = super.tryCall(
      "fulfill",
      "fulfill(bytes32,address,address,bytes4,bytes,bytes):(bool,bytes)",
      [
        ethereum.Value.fromFixedBytes(requestId),
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromAddress(fulfillAddress),
        ethereum.Value.fromFixedBytes(fulfillFunctionId),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AirnodeRrpV0__fulfillResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  getTemplates(templateIds: Array<Bytes>): AirnodeRrpV0__getTemplatesResult {
    let result = super.call(
      "getTemplates",
      "getTemplates(bytes32[]):(address[],bytes32[],bytes[])",
      [ethereum.Value.fromFixedBytesArray(templateIds)]
    );

    return new AirnodeRrpV0__getTemplatesResult(
      result[0].toAddressArray(),
      result[1].toBytesArray(),
      result[2].toBytesArray()
    );
  }

  try_getTemplates(
    templateIds: Array<Bytes>
  ): ethereum.CallResult<AirnodeRrpV0__getTemplatesResult> {
    let result = super.tryCall(
      "getTemplates",
      "getTemplates(bytes32[]):(address[],bytes32[],bytes[])",
      [ethereum.Value.fromFixedBytesArray(templateIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AirnodeRrpV0__getTemplatesResult(
        value[0].toAddressArray(),
        value[1].toBytesArray(),
        value[2].toBytesArray()
      )
    );
  }

  makeFullRequest(
    airnode: Address,
    endpointId: Bytes,
    sponsor: Address,
    sponsorWallet: Address,
    fulfillAddress: Address,
    fulfillFunctionId: Bytes,
    parameters: Bytes
  ): Bytes {
    let result = super.call(
      "makeFullRequest",
      "makeFullRequest(address,bytes32,address,address,address,bytes4,bytes):(bytes32)",
      [
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytes(endpointId),
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromAddress(sponsorWallet),
        ethereum.Value.fromAddress(fulfillAddress),
        ethereum.Value.fromFixedBytes(fulfillFunctionId),
        ethereum.Value.fromBytes(parameters)
      ]
    );

    return result[0].toBytes();
  }

  try_makeFullRequest(
    airnode: Address,
    endpointId: Bytes,
    sponsor: Address,
    sponsorWallet: Address,
    fulfillAddress: Address,
    fulfillFunctionId: Bytes,
    parameters: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "makeFullRequest",
      "makeFullRequest(address,bytes32,address,address,address,bytes4,bytes):(bytes32)",
      [
        ethereum.Value.fromAddress(airnode),
        ethereum.Value.fromFixedBytes(endpointId),
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromAddress(sponsorWallet),
        ethereum.Value.fromAddress(fulfillAddress),
        ethereum.Value.fromFixedBytes(fulfillFunctionId),
        ethereum.Value.fromBytes(parameters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  makeTemplateRequest(
    templateId: Bytes,
    sponsor: Address,
    sponsorWallet: Address,
    fulfillAddress: Address,
    fulfillFunctionId: Bytes,
    parameters: Bytes
  ): Bytes {
    let result = super.call(
      "makeTemplateRequest",
      "makeTemplateRequest(bytes32,address,address,address,bytes4,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(templateId),
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromAddress(sponsorWallet),
        ethereum.Value.fromAddress(fulfillAddress),
        ethereum.Value.fromFixedBytes(fulfillFunctionId),
        ethereum.Value.fromBytes(parameters)
      ]
    );

    return result[0].toBytes();
  }

  try_makeTemplateRequest(
    templateId: Bytes,
    sponsor: Address,
    sponsorWallet: Address,
    fulfillAddress: Address,
    fulfillFunctionId: Bytes,
    parameters: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "makeTemplateRequest",
      "makeTemplateRequest(bytes32,address,address,address,bytes4,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(templateId),
        ethereum.Value.fromAddress(sponsor),
        ethereum.Value.fromAddress(sponsorWallet),
        ethereum.Value.fromAddress(fulfillAddress),
        ethereum.Value.fromFixedBytes(fulfillFunctionId),
        ethereum.Value.fromBytes(parameters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  requestIsAwaitingFulfillment(requestId: Bytes): boolean {
    let result = super.call(
      "requestIsAwaitingFulfillment",
      "requestIsAwaitingFulfillment(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(requestId)]
    );

    return result[0].toBoolean();
  }

  try_requestIsAwaitingFulfillment(
    requestId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestIsAwaitingFulfillment",
      "requestIsAwaitingFulfillment(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requesterToRequestCountPlusOne(param0: Address): BigInt {
    let result = super.call(
      "requesterToRequestCountPlusOne",
      "requesterToRequestCountPlusOne(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_requesterToRequestCountPlusOne(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requesterToRequestCountPlusOne",
      "requesterToRequestCountPlusOne(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsorToRequesterToSponsorshipStatus(
    param0: Address,
    param1: Address
  ): boolean {
    let result = super.call(
      "sponsorToRequesterToSponsorshipStatus",
      "sponsorToRequesterToSponsorshipStatus(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_sponsorToRequesterToSponsorshipStatus(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "sponsorToRequesterToSponsorshipStatus",
      "sponsorToRequesterToSponsorshipStatus(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sponsorToWithdrawalRequestCount(param0: Address): BigInt {
    let result = super.call(
      "sponsorToWithdrawalRequestCount",
      "sponsorToWithdrawalRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_sponsorToWithdrawalRequestCount(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sponsorToWithdrawalRequestCount",
      "sponsorToWithdrawalRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  templates(param0: Bytes): AirnodeRrpV0__templatesResult {
    let result = super.call(
      "templates",
      "templates(bytes32):(address,bytes32,bytes)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new AirnodeRrpV0__templatesResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBytes()
    );
  }

  try_templates(
    param0: Bytes
  ): ethereum.CallResult<AirnodeRrpV0__templatesResult> {
    let result = super.tryCall(
      "templates",
      "templates(bytes32):(address,bytes32,bytes)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AirnodeRrpV0__templatesResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBytes()
      )
    );
  }
}

export class CreateTemplateCall extends ethereum.Call {
  get inputs(): CreateTemplateCall__Inputs {
    return new CreateTemplateCall__Inputs(this);
  }

  get outputs(): CreateTemplateCall__Outputs {
    return new CreateTemplateCall__Outputs(this);
  }
}

export class CreateTemplateCall__Inputs {
  _call: CreateTemplateCall;

  constructor(call: CreateTemplateCall) {
    this._call = call;
  }

  get airnode(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get endpointId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get parameters(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateTemplateCall__Outputs {
  _call: CreateTemplateCall;

  constructor(call: CreateTemplateCall) {
    this._call = call;
  }

  get templateId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class FailCall extends ethereum.Call {
  get inputs(): FailCall__Inputs {
    return new FailCall__Inputs(this);
  }

  get outputs(): FailCall__Outputs {
    return new FailCall__Outputs(this);
  }
}

export class FailCall__Inputs {
  _call: FailCall;

  constructor(call: FailCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get airnode(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fulfillAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get fulfillFunctionId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get errorMessage(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class FailCall__Outputs {
  _call: FailCall;

  constructor(call: FailCall) {
    this._call = call;
  }
}

export class FulfillCall extends ethereum.Call {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get airnode(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fulfillAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get fulfillFunctionId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get callSuccess(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get callData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class FulfillWithdrawalCall extends ethereum.Call {
  get inputs(): FulfillWithdrawalCall__Inputs {
    return new FulfillWithdrawalCall__Inputs(this);
  }

  get outputs(): FulfillWithdrawalCall__Outputs {
    return new FulfillWithdrawalCall__Outputs(this);
  }
}

export class FulfillWithdrawalCall__Inputs {
  _call: FulfillWithdrawalCall;

  constructor(call: FulfillWithdrawalCall) {
    this._call = call;
  }

  get withdrawalRequestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get airnode(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sponsor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class FulfillWithdrawalCall__Outputs {
  _call: FulfillWithdrawalCall;

  constructor(call: FulfillWithdrawalCall) {
    this._call = call;
  }
}

export class MakeFullRequestCall extends ethereum.Call {
  get inputs(): MakeFullRequestCall__Inputs {
    return new MakeFullRequestCall__Inputs(this);
  }

  get outputs(): MakeFullRequestCall__Outputs {
    return new MakeFullRequestCall__Outputs(this);
  }
}

export class MakeFullRequestCall__Inputs {
  _call: MakeFullRequestCall;

  constructor(call: MakeFullRequestCall) {
    this._call = call;
  }

  get airnode(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get endpointId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sponsor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get sponsorWallet(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get fulfillAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get fulfillFunctionId(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get parameters(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class MakeFullRequestCall__Outputs {
  _call: MakeFullRequestCall;

  constructor(call: MakeFullRequestCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class MakeTemplateRequestCall extends ethereum.Call {
  get inputs(): MakeTemplateRequestCall__Inputs {
    return new MakeTemplateRequestCall__Inputs(this);
  }

  get outputs(): MakeTemplateRequestCall__Outputs {
    return new MakeTemplateRequestCall__Outputs(this);
  }
}

export class MakeTemplateRequestCall__Inputs {
  _call: MakeTemplateRequestCall;

  constructor(call: MakeTemplateRequestCall) {
    this._call = call;
  }

  get templateId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sponsor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sponsorWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get fulfillAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get fulfillFunctionId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get parameters(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class MakeTemplateRequestCall__Outputs {
  _call: MakeTemplateRequestCall;

  constructor(call: MakeTemplateRequestCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RequestWithdrawalCall extends ethereum.Call {
  get inputs(): RequestWithdrawalCall__Inputs {
    return new RequestWithdrawalCall__Inputs(this);
  }

  get outputs(): RequestWithdrawalCall__Outputs {
    return new RequestWithdrawalCall__Outputs(this);
  }
}

export class RequestWithdrawalCall__Inputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }

  get airnode(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sponsorWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RequestWithdrawalCall__Outputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }
}

export class SetSponsorshipStatusCall extends ethereum.Call {
  get inputs(): SetSponsorshipStatusCall__Inputs {
    return new SetSponsorshipStatusCall__Inputs(this);
  }

  get outputs(): SetSponsorshipStatusCall__Outputs {
    return new SetSponsorshipStatusCall__Outputs(this);
  }
}

export class SetSponsorshipStatusCall__Inputs {
  _call: SetSponsorshipStatusCall;

  constructor(call: SetSponsorshipStatusCall) {
    this._call = call;
  }

  get requester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sponsorshipStatus(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSponsorshipStatusCall__Outputs {
  _call: SetSponsorshipStatusCall;

  constructor(call: SetSponsorshipStatusCall) {
    this._call = call;
  }
}
