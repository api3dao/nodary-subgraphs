// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PaidForOrder extends ethereum.Event {
  get params(): PaidForOrder__Params {
    return new PaidForOrder__Params(this);
  }
}

export class PaidForOrder__Params {
  _event: PaidForOrder;

  constructor(event: PaidForOrder) {
    this._event = event;
  }

  get orderId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get expirationTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderSigner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Withdrew extends ethereum.Event {
  get params(): Withdrew__Params {
    return new Withdrew__Params(this);
  }
}

export class Withdrew__Params {
  _event: Withdrew;

  constructor(event: Withdrew) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderPayable__tryMulticallResult {
  value0: Array<boolean>;
  value1: Array<Bytes>;

  constructor(value0: Array<boolean>, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromBytesArray(this.value1));
    return map;
  }

  getSuccesses(): Array<boolean> {
    return this.value0;
  }

  getReturndata(): Array<Bytes> {
    return this.value1;
  }
}

export class OrderPayable extends ethereum.SmartContract {
  static bind(address: Address): OrderPayable {
    return new OrderPayable("OrderPayable", address);
  }

  ORDER_SIGNER_ROLE_DESCRIPTION(): string {
    let result = super.call(
      "ORDER_SIGNER_ROLE_DESCRIPTION",
      "ORDER_SIGNER_ROLE_DESCRIPTION():(string)",
      []
    );

    return result[0].toString();
  }

  try_ORDER_SIGNER_ROLE_DESCRIPTION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ORDER_SIGNER_ROLE_DESCRIPTION",
      "ORDER_SIGNER_ROLE_DESCRIPTION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  WITHDRAWER_ROLE_DESCRIPTION(): string {
    let result = super.call(
      "WITHDRAWER_ROLE_DESCRIPTION",
      "WITHDRAWER_ROLE_DESCRIPTION():(string)",
      []
    );

    return result[0].toString();
  }

  try_WITHDRAWER_ROLE_DESCRIPTION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "WITHDRAWER_ROLE_DESCRIPTION",
      "WITHDRAWER_ROLE_DESCRIPTION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  accessControlRegistry(): Address {
    let result = super.call(
      "accessControlRegistry",
      "accessControlRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_accessControlRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accessControlRegistry",
      "accessControlRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminRole(): Bytes {
    let result = super.call("adminRole", "adminRole():(bytes32)", []);

    return result[0].toBytes();
  }

  try_adminRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("adminRole", "adminRole():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  adminRoleDescription(): string {
    let result = super.call(
      "adminRoleDescription",
      "adminRoleDescription():(string)",
      []
    );

    return result[0].toString();
  }

  try_adminRoleDescription(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "adminRoleDescription",
      "adminRoleDescription():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  orderIdToPaymentStatus(param0: Bytes): boolean {
    let result = super.call(
      "orderIdToPaymentStatus",
      "orderIdToPaymentStatus(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_orderIdToPaymentStatus(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "orderIdToPaymentStatus",
      "orderIdToPaymentStatus(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orderSignerRole(): Bytes {
    let result = super.call(
      "orderSignerRole",
      "orderSignerRole():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_orderSignerRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "orderSignerRole",
      "orderSignerRole():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tryMulticall(data: Array<Bytes>): OrderPayable__tryMulticallResult {
    let result = super.call(
      "tryMulticall",
      "tryMulticall(bytes[]):(bool[],bytes[])",
      [ethereum.Value.fromBytesArray(data)]
    );

    return new OrderPayable__tryMulticallResult(
      result[0].toBooleanArray(),
      result[1].toBytesArray()
    );
  }

  try_tryMulticall(
    data: Array<Bytes>
  ): ethereum.CallResult<OrderPayable__tryMulticallResult> {
    let result = super.tryCall(
      "tryMulticall",
      "tryMulticall(bytes[]):(bool[],bytes[])",
      [ethereum.Value.fromBytesArray(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OrderPayable__tryMulticallResult(
        value[0].toBooleanArray(),
        value[1].toBytesArray()
      )
    );
  }

  withdraw(recipient: Address): BigInt {
    let result = super.call("withdraw", "withdraw(address):(uint256)", [
      ethereum.Value.fromAddress(recipient)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(recipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(address):(uint256)", [
      ethereum.Value.fromAddress(recipient)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawerRole(): Bytes {
    let result = super.call("withdrawerRole", "withdrawerRole():(bytes32)", []);

    return result[0].toBytes();
  }

  try_withdrawerRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "withdrawerRole",
      "withdrawerRole():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _accessControlRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _adminRoleDescription(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get returndata(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PayForOrderCall extends ethereum.Call {
  get inputs(): PayForOrderCall__Inputs {
    return new PayForOrderCall__Inputs(this);
  }

  get outputs(): PayForOrderCall__Outputs {
    return new PayForOrderCall__Outputs(this);
  }
}

export class PayForOrderCall__Inputs {
  _call: PayForOrderCall;

  constructor(call: PayForOrderCall) {
    this._call = call;
  }

  get encodedData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PayForOrderCall__Outputs {
  _call: PayForOrderCall;

  constructor(call: PayForOrderCall) {
    this._call = call;
  }
}

export class TryMulticallCall extends ethereum.Call {
  get inputs(): TryMulticallCall__Inputs {
    return new TryMulticallCall__Inputs(this);
  }

  get outputs(): TryMulticallCall__Outputs {
    return new TryMulticallCall__Outputs(this);
  }
}

export class TryMulticallCall__Inputs {
  _call: TryMulticallCall;

  constructor(call: TryMulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class TryMulticallCall__Outputs {
  _call: TryMulticallCall;

  constructor(call: TryMulticallCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get returndata(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
