// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DecreasedUserWithdrawalLimit extends ethereum.Event {
  get params(): DecreasedUserWithdrawalLimit__Params {
    return new DecreasedUserWithdrawalLimit__Params(this);
  }
}

export class DecreasedUserWithdrawalLimit__Params {
  _event: DecreasedUserWithdrawalLimit;

  constructor(event: DecreasedUserWithdrawalLimit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawalLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawalLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class IncreasedUserWithdrawalLimit extends ethereum.Event {
  get params(): IncreasedUserWithdrawalLimit__Params {
    return new IncreasedUserWithdrawalLimit__Params(this);
  }
}

export class IncreasedUserWithdrawalLimit__Params {
  _event: IncreasedUserWithdrawalLimit;

  constructor(event: IncreasedUserWithdrawalLimit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawalLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SetWithdrawalDestination extends ethereum.Event {
  get params(): SetWithdrawalDestination__Params {
    return new SetWithdrawalDestination__Params(this);
  }
}

export class SetWithdrawalDestination__Params {
  _event: SetWithdrawalDestination;

  constructor(event: SetWithdrawalDestination) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawalDestination(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdrew extends ethereum.Event {
  get params(): Withdrew__Params {
    return new Withdrew__Params(this);
  }
}

export class Withdrew__Params {
  _event: Withdrew;

  constructor(event: Withdrew) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawalHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get withdrawalSigner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get withdrawalDestination(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get withdrawalLimit(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PrepaymentDepository__tryMulticallResult {
  value0: Array<boolean>;
  value1: Array<Bytes>;

  constructor(value0: Array<boolean>, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromBytesArray(this.value1));
    return map;
  }

  getSuccesses(): Array<boolean> {
    return this.value0;
  }

  getReturndata(): Array<Bytes> {
    return this.value1;
  }
}

export class PrepaymentDepository__withdrawResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getWithdrawalDestination(): Address {
    return this.value0;
  }

  getWithdrawalLimit(): BigInt {
    return this.value1;
  }
}

export class PrepaymentDepository extends ethereum.SmartContract {
  static bind(address: Address): PrepaymentDepository {
    return new PrepaymentDepository("PrepaymentDepository", address);
  }

  CLAIMER_ROLE_DESCRIPTION(): string {
    let result = super.call(
      "CLAIMER_ROLE_DESCRIPTION",
      "CLAIMER_ROLE_DESCRIPTION():(string)",
      []
    );

    return result[0].toString();
  }

  try_CLAIMER_ROLE_DESCRIPTION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "CLAIMER_ROLE_DESCRIPTION",
      "CLAIMER_ROLE_DESCRIPTION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(): string {
    let result = super.call(
      "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION",
      "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION():(string)",
      []
    );

    return result[0].toString();
  }

  try_USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(): ethereum.CallResult<
    string
  > {
    let result = super.tryCall(
      "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION",
      "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(): string {
    let result = super.call(
      "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION",
      "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION():(string)",
      []
    );

    return result[0].toString();
  }

  try_USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(): ethereum.CallResult<
    string
  > {
    let result = super.tryCall(
      "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION",
      "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(): string {
    let result = super.call(
      "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION",
      "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION():(string)",
      []
    );

    return result[0].toString();
  }

  try_WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION",
      "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  accessControlRegistry(): Address {
    let result = super.call(
      "accessControlRegistry",
      "accessControlRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_accessControlRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accessControlRegistry",
      "accessControlRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminRole(): Bytes {
    let result = super.call("adminRole", "adminRole():(bytes32)", []);

    return result[0].toBytes();
  }

  try_adminRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("adminRole", "adminRole():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  adminRoleDescription(): string {
    let result = super.call(
      "adminRoleDescription",
      "adminRoleDescription():(string)",
      []
    );

    return result[0].toString();
  }

  try_adminRoleDescription(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "adminRoleDescription",
      "adminRoleDescription():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  applyPermitAndDeposit(
    user: Address,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "applyPermitAndDeposit",
      "applyPermitAndDeposit(address,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_applyPermitAndDeposit(
    user: Address,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "applyPermitAndDeposit",
      "applyPermitAndDeposit(address,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimerRole(): Bytes {
    let result = super.call("claimerRole", "claimerRole():(bytes32)", []);

    return result[0].toBytes();
  }

  try_claimerRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("claimerRole", "claimerRole():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  decreaseUserWithdrawalLimit(user: Address, amount: BigInt): BigInt {
    let result = super.call(
      "decreaseUserWithdrawalLimit",
      "decreaseUserWithdrawalLimit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_decreaseUserWithdrawalLimit(
    user: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decreaseUserWithdrawalLimit",
      "decreaseUserWithdrawalLimit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(user: Address, amount: BigInt): BigInt {
    let result = super.call("deposit", "deposit(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(user: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseUserWithdrawalLimit(user: Address, amount: BigInt): BigInt {
    let result = super.call(
      "increaseUserWithdrawalLimit",
      "increaseUserWithdrawalLimit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_increaseUserWithdrawalLimit(
    user: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "increaseUserWithdrawalLimit",
      "increaseUserWithdrawalLimit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tryMulticall(data: Array<Bytes>): PrepaymentDepository__tryMulticallResult {
    let result = super.call(
      "tryMulticall",
      "tryMulticall(bytes[]):(bool[],bytes[])",
      [ethereum.Value.fromBytesArray(data)]
    );

    return new PrepaymentDepository__tryMulticallResult(
      result[0].toBooleanArray(),
      result[1].toBytesArray()
    );
  }

  try_tryMulticall(
    data: Array<Bytes>
  ): ethereum.CallResult<PrepaymentDepository__tryMulticallResult> {
    let result = super.tryCall(
      "tryMulticall",
      "tryMulticall(bytes[]):(bool[],bytes[])",
      [ethereum.Value.fromBytesArray(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrepaymentDepository__tryMulticallResult(
        value[0].toBooleanArray(),
        value[1].toBytesArray()
      )
    );
  }

  userToWithdrawalDestination(param0: Address): Address {
    let result = super.call(
      "userToWithdrawalDestination",
      "userToWithdrawalDestination(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_userToWithdrawalDestination(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userToWithdrawalDestination",
      "userToWithdrawalDestination(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userToWithdrawalLimit(param0: Address): BigInt {
    let result = super.call(
      "userToWithdrawalLimit",
      "userToWithdrawalLimit(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userToWithdrawalLimit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToWithdrawalLimit",
      "userToWithdrawalLimit(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userWithdrawalLimitDecreaserRole(): Bytes {
    let result = super.call(
      "userWithdrawalLimitDecreaserRole",
      "userWithdrawalLimitDecreaserRole():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_userWithdrawalLimitDecreaserRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "userWithdrawalLimitDecreaserRole",
      "userWithdrawalLimitDecreaserRole():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  userWithdrawalLimitIncreaserRole(): Bytes {
    let result = super.call(
      "userWithdrawalLimitIncreaserRole",
      "userWithdrawalLimitIncreaserRole():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_userWithdrawalLimitIncreaserRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "userWithdrawalLimitIncreaserRole",
      "userWithdrawalLimitIncreaserRole():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  withdraw(
    amount: BigInt,
    expirationTimestamp: BigInt,
    withdrawalSigner: Address,
    signature: Bytes
  ): PrepaymentDepository__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,uint256,address,bytes):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(expirationTimestamp),
        ethereum.Value.fromAddress(withdrawalSigner),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return new PrepaymentDepository__withdrawResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_withdraw(
    amount: BigInt,
    expirationTimestamp: BigInt,
    withdrawalSigner: Address,
    signature: Bytes
  ): ethereum.CallResult<PrepaymentDepository__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256,address,bytes):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(expirationTimestamp),
        ethereum.Value.fromAddress(withdrawalSigner),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrepaymentDepository__withdrawResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  withdrawalSignerRole(): Bytes {
    let result = super.call(
      "withdrawalSignerRole",
      "withdrawalSignerRole():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_withdrawalSignerRole(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "withdrawalSignerRole",
      "withdrawalSignerRole():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  withdrawalWithHashIsExecuted(param0: Bytes): boolean {
    let result = super.call(
      "withdrawalWithHashIsExecuted",
      "withdrawalWithHashIsExecuted(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_withdrawalWithHashIsExecuted(
    param0: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawalWithHashIsExecuted",
      "withdrawalWithHashIsExecuted(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _accessControlRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _adminRoleDescription(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApplyPermitAndDepositCall extends ethereum.Call {
  get inputs(): ApplyPermitAndDepositCall__Inputs {
    return new ApplyPermitAndDepositCall__Inputs(this);
  }

  get outputs(): ApplyPermitAndDepositCall__Outputs {
    return new ApplyPermitAndDepositCall__Outputs(this);
  }
}

export class ApplyPermitAndDepositCall__Inputs {
  _call: ApplyPermitAndDepositCall;

  constructor(call: ApplyPermitAndDepositCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ApplyPermitAndDepositCall__Outputs {
  _call: ApplyPermitAndDepositCall;

  constructor(call: ApplyPermitAndDepositCall) {
    this._call = call;
  }

  get withdrawalLimit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DecreaseUserWithdrawalLimitCall extends ethereum.Call {
  get inputs(): DecreaseUserWithdrawalLimitCall__Inputs {
    return new DecreaseUserWithdrawalLimitCall__Inputs(this);
  }

  get outputs(): DecreaseUserWithdrawalLimitCall__Outputs {
    return new DecreaseUserWithdrawalLimitCall__Outputs(this);
  }
}

export class DecreaseUserWithdrawalLimitCall__Inputs {
  _call: DecreaseUserWithdrawalLimitCall;

  constructor(call: DecreaseUserWithdrawalLimitCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseUserWithdrawalLimitCall__Outputs {
  _call: DecreaseUserWithdrawalLimitCall;

  constructor(call: DecreaseUserWithdrawalLimitCall) {
    this._call = call;
  }

  get withdrawalLimit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get withdrawalLimit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseUserWithdrawalLimitCall extends ethereum.Call {
  get inputs(): IncreaseUserWithdrawalLimitCall__Inputs {
    return new IncreaseUserWithdrawalLimitCall__Inputs(this);
  }

  get outputs(): IncreaseUserWithdrawalLimitCall__Outputs {
    return new IncreaseUserWithdrawalLimitCall__Outputs(this);
  }
}

export class IncreaseUserWithdrawalLimitCall__Inputs {
  _call: IncreaseUserWithdrawalLimitCall;

  constructor(call: IncreaseUserWithdrawalLimitCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseUserWithdrawalLimitCall__Outputs {
  _call: IncreaseUserWithdrawalLimitCall;

  constructor(call: IncreaseUserWithdrawalLimitCall) {
    this._call = call;
  }

  get withdrawalLimit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get returndata(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class SetWithdrawalDestinationCall extends ethereum.Call {
  get inputs(): SetWithdrawalDestinationCall__Inputs {
    return new SetWithdrawalDestinationCall__Inputs(this);
  }

  get outputs(): SetWithdrawalDestinationCall__Outputs {
    return new SetWithdrawalDestinationCall__Outputs(this);
  }
}

export class SetWithdrawalDestinationCall__Inputs {
  _call: SetWithdrawalDestinationCall;

  constructor(call: SetWithdrawalDestinationCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get withdrawalDestination(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetWithdrawalDestinationCall__Outputs {
  _call: SetWithdrawalDestinationCall;

  constructor(call: SetWithdrawalDestinationCall) {
    this._call = call;
  }
}

export class TryMulticallCall extends ethereum.Call {
  get inputs(): TryMulticallCall__Inputs {
    return new TryMulticallCall__Inputs(this);
  }

  get outputs(): TryMulticallCall__Outputs {
    return new TryMulticallCall__Outputs(this);
  }
}

export class TryMulticallCall__Inputs {
  _call: TryMulticallCall;

  constructor(call: TryMulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class TryMulticallCall__Outputs {
  _call: TryMulticallCall;

  constructor(call: TryMulticallCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get returndata(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get withdrawalSigner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get withdrawalDestination(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get withdrawalLimit(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
